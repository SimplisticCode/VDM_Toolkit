module recordClocks1 
exports all
definitions

types
	Real1 = real
	inv r == r >=0 ;

	/**
	 * A point in superdense time is represented by a real quantity and a whole
	 * number instant "within" that time.
	 */
	Time ::
		r	: Real1
		i	: nat
	eq a = b == a.r = b.r and a.i = b.i
	ord a < b ==
		(a.r < b.r) or (a.r = b.r and a.i < b.i); 
		
	ValueType = real | int;

	Ref = nat;

	/**
	* The value that a variable can have. 
	* It contains a time and a value
	*/
	FMIValue ::
		fmiValue : ValueType
		time 	 : Time
	eq mk_FMIValue(val1, t1) = mk_FMIValue(val2, t2) == 
		val1 = val2
		and t1 = t2
	ord mk_FMIValue(-, t1) < mk_FMIValue(-, t2) == t1 < t2;

	/**
	* The current known FMU variable values. These are usually used by FMUs, but note that
	* Clocks can produce temporary environments that are not committed until a step.
	*/
	Environment = map Ref to FMIValue
	inv - == true;

	/**
	* A variable is identified by a Ref (within an FMU).
	*/
	Variable ::
		ref			: Ref;


	FMU :: 
		id 					: nat
		env					: Environment;

functions

	-- updateOutputs_Simple : FMU * Time -> Environment
	-- updateOutputs_Simple(fmu, time) ==
	-- 	{oValue |-> mk_FMIValue(oValue, time) | oValue in set dom fmu.env}
	-- pre true;


	-- updateOutputs_WithTypes : FMU * Time -> Environment
	-- updateOutputs_WithTypes(fmu, time) ==
	-- 	{oValue |-> mk_FMIValue(oValue, time) | oValue in set dom fmu.env
	-- 												& is_nat(oValue)}
	-- pre true;
	--This works
	updateOutputs_Types : FMU * Time -> Environment
	updateOutputs_Types(fmu, time) ==
		let nat_values : set of nat = {oValue | oValue in set dom fmu.env & is_nat(oValue)},
			mapValues : set of FMIValue = {mk_FMIValue(oValue, time) | oValue in set nat_values}
		in
			{oValue |-> mapValue | oValue in set nat_values,
									mapValue in set mapValues}
	pre true;

end recordClocks1